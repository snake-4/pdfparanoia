from ..parser import iterate_objects
from ..eraser import (
    replace_object_with,
)
from ..plugin import Plugin

from pdfminer.pdftypes import PDFStream


class JSTOR(Plugin):
    """
    JSTOR
    ~~~~~~~~~~~~~~~

    JSTOR watermarks a first page with an "Accessed" date, lots of TC barf, and
    then also a watermark at the bottom of each page with a timestamp.

    Watermarks removed:
        * "Accessed" timestamp on the front page
        * footer watermarks on each page

    This was primary written for JSTOR pdfs generated by:
         /Producer (itext-paulo-155 \\(itextpdf.sf.net-lowagie.com\\))
    """

    # these terms appear on a page that has been watermarked
    WATERMARKS = [
        b"All use subject to ",
        b"JSTOR Terms and Conditions",
        b"This content downloaded  on",
    ]

    @staticmethod
    def scrub(content: bytes, verbose: bool = False) -> bytes:
        replacements = []

        # jstor has certain watermarks only on the first page
        page_id = 0

        # check each object in the pdf
        for objid, obj in iterate_objects(content):
            if isinstance(obj, PDFStream):
                if "FlateDecode" in str(obj.attrs.get("Filter", "")):
                    data = obj.get_data()

                    # make sure all of the requirements are in there
                    if all(x in data for x in JSTOR.WATERMARKS):
                        # remove the date
                        startpos = data.find(b"This content downloaded ")
                        endpos = data.find(b")", startpos)
                        segment = data[startpos:endpos]
                        if verbose and replacements:
                            print(
                                f"JSTOR: Found object {objid} with {JSTOR.WATERMARKS}: {segment}; omitting..."
                            )

                        data = data.replace(segment, b"")

                        # it looks like all of the watermarks are at the end?
                        data = data[:-160]

                        # "Accessed on dd/mm/yyy hh:mm"
                        #
                        # the "Accessed" line is only on the first page
                        #
                        # it's based on /F2
                        #
                        # This would be better if it could be decoded to
                        # actually search for the "Accessed" text.
                        if page_id == 0 and b"/F2 11 Tf\n" in data:
                            startpos = data.rfind(b"/F2 11 Tf\n")
                            endpos = data.find(b"Tf\n", startpos + 5)

                            if verbose and replacements:
                                print(
                                    f"JSTOR: Found object {objid} with {JSTOR.WATERMARKS}: {data[startpos:endpos]}; omitting..."
                                )

                            data = data[0:startpos] + data[endpos:]

                        replacements.append([objid, data])

                        page_id += 1

        if verbose and replacements:
            print(
                f'JSTOR: Found objects {[deets[0] for deets in replacements]} with "{JSTOR.WATERMARKS}"; omitting...'
            )

        for deets in replacements:
            objid = deets[0]
            replacement = deets[1]
            content = replace_object_with(content, objid, replacement)

        return content
